mode: standalone
rootUser: "admin"
rootPassword: "G33kw33k!"
replicas: 1
persistence:
  size: 50Gi
resources:
  requests:
    memory: 16Gi
oidc:
  enabled: false
  configUrl: "http://authentik-server.authentik/application/o/minio/.well-known/openid-configuration"
  clientId: "j1pFkldsE7mbe2zVJn2xNZXD9A2DQWmCBDon7PLa"
  clientSecret: "xZFhqqMdJ85OKDv4eOkjYrBPKm0ZMV7Psg91VBCafLBBK25d2PPBpEWeT2Jhd5w8yzsKv8IxAAKyXy5zcYlHohY9A9xrkZcLhllxRnTpq8yH7rbwwNLd0dGqhCWYlCTh"
  claimName: "policy"
  scopes: "openid,profile,email,minio"
  redirectUri: "https://minio.internal.magiccityit.com/oauth_callback"

# users: []
  ## Username, password and policy to be assigned to the user
  ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
  ## Add new policies as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management.html#access-management
  ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
  ## make sure to disable this if you are using LDAP.
  # - accessKey: console
  #   secretKey: console123
  #   policy: consoleAdmin
  # Or you can refer to specific secret
  #- accessKey: externalSecret
  #  existingSecret: my-secret
  #  existingSecretKey: password
  #  policy: readonly

buckets:
  - name: mimir-tsdb
    policy: none
    purge: false
  - name: mimir-ruler
    policy: none
    purge: false
  - name: enterprise-metrics-tsdb
    policy: none
    purge: false
  - name: enterprise-metrics-admin
    policy: none
    purge: false
  - name: enterprise-metrics-ruler
    policy: none
    purge: false

## List of command to run after minio install
## NOTE: the mc command TARGET is always "myminio"
# customCommands:
#   # - command: "admin policy attach myminio consoleAdmin --group='cn=ops,cn=groups,dc=example,dc=com'"
#   - command: |
#       admin config set myminio identity_openid \
#         config_url="https://authentik.internal.magiccityit.com/application/o/minio/.well-known/openid-configuration" \
#         client_id="j1pFkldsE7mbe2zVJn2xNZXD9A2DQWmCBDon7PLa" \
#         client_secret="xZFhqqMdJ85OKDv4eOkjYrBPKm0ZMV7Psg91VBCafLBBK25d2PPBpEWeT2Jhd5w8yzsKv8IxAAKyXy5zcYlHohY9A9xrkZcLhllxRnTpq8yH7rbwwNLd0dGqhCWYlCTh" \
#         scopes="openid,profile,email,minio"

networkPolicy:
  enabled: false
  # Specifies whether the policies created will be standard Network Policies (flavor: kubernetes)
  # or Cilium Network Policies (flavor: cilium)
  flavor: kubernetes
  allowExternal: true
  # only when using flavor: cilium
  egressEntities:
   - kube-apiserver

## PodDisruptionBudget settings
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
##
podDisruptionBudget:
  enabled: false
  maxUnavailable: 1

## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
## and 'name' is left unspecified, the account 'default' will be used.
serviceAccount:
  create: true
  ## The name of the service account to use. If 'create' is 'true', a service account with that name
  ## will be created.
  name: "minio-sa"

metrics:
  serviceMonitor:
    enabled: true
    # scrape each node/pod individually for additional metrics
    includeNode: true
    public: true
    additionalLabels: {}
    annotations: {}
    # for node metrics
    relabelConfigs: {}
    # for cluster metrics
    relabelConfigsCluster: {}
      # metricRelabelings:
      #   - regex: (server|pod)
      #     action: labeldrop
    namespace: ~
    # Scrape interval, for example `interval: 30s`
    interval: ~
    # Scrape timeout, for example `scrapeTimeout: 10s`
    scrapeTimeout: ~

## ETCD settings: https://github.com/minio/minio/blob/master/docs/sts/etcd.md
## Define endpoints to enable this section.
etcd:
  endpoints: []
  pathPrefix: ""
  corednsPathPrefix: ""
  clientCert: ""
  clientCertKey: ""
