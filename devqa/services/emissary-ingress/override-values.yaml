image:
  # Emissary Ingress docker repo
  repository: registry.internal.magiccityit.com/emissary
  # Emissary Ingress docker tag
  tag: 3.10.0-rc.0.0.20240903174446-ac2dc64c6621
  # Pod container image pull policy
  # pullPolicy: IfNotPresent

# Enable autoscaling using HorizontalPodAutoscaler
# daemonSet: true, autoscaling will be disabled
autoscaling: # +doc-gen:break
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 100
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 300

# Install IngressClass resource
ingressClassResource:
  enabled: true
  name: ambassador
  default: true
  controllerValue: getambassador.io/ingress-controller

# namespace:
#   # Explicitly set the AMBASSADOR_NAMESPACE environment variable
#   name: emissary

scope:
  # Set the AMBASSADOR_SINGLE_NAMESPACE environment variable and create namespaced RBAC if rbac.enabled: true
  singleNamespace: true

env:
  AMBASSADOR_ID: "emissary"

resolvers: # +doc-gen:break
  endpoint:
    create: true
    name: endpoint


# Prometheus Operator ServiceMonitor configuration
# See documentation: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#servicemonitor
metrics:
  serviceMonitor:
    enabled: true
    # interval: 30s
    # scrapeTimeout: 30s
    # selector: {}

# Create and manage an Ambassador Module from the Helm Chart. See:
# https://www.getambassador.io/docs/edge-stack/latest/topics/running/ambassador
# for more info on the available options.
#
# Note: The Module can only be named ambassador. There can only be one Module
# installed per-namespace.
module:
  diagnostics:
    enabled: true
    allow_non_local: true
  envoy_log_path: /dev/stdout


# Configure the ambassador agent
agent:
  # If `true`, installs the ambassador-agent Deployment, ServiceAccount and ClusterRole in the ambassador namespace, enabling the Ambassador Cloud connectivity.
  enabled: false
  reportDiagnostics: false

  createArgoRBAC: false

# Whether Emissary should be created with default listeners:
# - HTTP on port 8080
# - HTTPS on port 8443
createDefaultListeners: true

app.kubernetes.io/component: ambassador-service

# Configure a 'lifecycle' section for the main pod
lifecycle: # +doc-gen:break
  # Example block that works well if the main container is running behind a load balancer that
  # is slow to deregister pods - e.g. with IP-type registration in an AWS TargetGroup:
  preStop:
    exec:
      command:
        - "sh"
        - "-c"
        - >
          curl -XPOST localhost:8001/healthcheck/fail;
          /bin/sleep 45;